c4dd5fcd523608c321cf25fb68b09d8645a6f161 Allow `define-language` to take a `#:binding-forms` clause.
diff --git a/redex-lib/redex/private/reduction-semantics.rkt b/redex-lib/redex/private/reduction-semantics.rkt
index 50b86a0..de65d7f 100644
--- a/redex-lib/redex/private/reduction-semantics.rkt
+++ b/redex-lib/redex/private/reduction-semantics.rkt
@@ -514,23 +514,23 @@
                        [((tl-id . tl-pat) ...)
                        (extract-term-let-binds #'rhs)])
            #`(make-rule-pict-info 'arrow
-                                  #,(to-lw/proc #'lhs)
-                                  #,(to-lw/proc #'rhs)
-                                  #,label
-                                  #,(and computed-label 
-                                         (to-lw/proc #`,#,computed-label))
-                                  (list scs/withs ...
-                                        #,@(map (λ (bind-id bind-pat)
-                                                  #`(cons #,(to-lw/proc bind-id)
-                                                          #,(to-lw/proc bind-pat)))
-                                                (syntax->list #'(bind-id ...))
-                                                (syntax->list #'(bind-pat ...)))
-                                        #,@(map (λ (tl-id tl-pat)
-                                                  #`(cons #,(to-lw/proc tl-id)
-                                                          #,(to-lw/uq/proc tl-pat)))
-                                                (syntax->list #'(tl-id ...))
-                                                (syntax->list #'(tl-pat ...))))
-                                  (list fvars ...))))]
+                             #,(to-lw/proc #'lhs)
+                             #,(to-lw/proc #'rhs)
+                             #,label
+                             #,(and computed-label 
+                                    (to-lw/proc #`,#,computed-label))
+                             (list scs/withs ...
+                                   #,@(map (λ (bind-id bind-pat)
+                                             #`(cons #,(to-lw/proc bind-id)
+                                                     #,(to-lw/proc bind-pat)))
+                                           (syntax->list #'(bind-id ...))
+                                           (syntax->list #'(bind-pat ...)))
+                                   #,@(map (λ (tl-id tl-pat)
+                                             #`(cons #,(to-lw/proc tl-id)
+                                                     #,(to-lw/uq/proc tl-pat)))
+                                           (syntax->list #'(tl-id ...))
+                                           (syntax->list #'(tl-pat ...))))
+                             (list fvars ...))))]
       ;; just skip over junk here, since syntax error checks elsewhere will catch this
       [_ #f]))
   
@@ -800,12 +800,12 @@
               lhs-syncheck-expr
               (build-rewrite-proc/leaf 
                `side-conditions-rewritten
-               (λ (#,rt-lang-id)
-                 (λ (main-exp bindings)
-                   #,(bind-pattern-names 'reduction-relation
-                                         #'(names/ellipses ...)
-                                         #'((lookup-binding bindings 'names) ...)
-                                         #'body-code)))
+               (λ (#,rt-lang-id) 
+                  (λ (main-exp bindings)
+                     #,(bind-pattern-names 'reduction-relation
+                                           #'(names/ellipses ...)
+                                           #'((lookup-binding bindings 'names) ...)
+                                           #'body-code)))
                lhs-source
                name
                (λ (lang-id2) `lhs-w/extras))))))
@@ -934,28 +934,28 @@
   (let ([case-id (gensym)])
     (make-rewrite-proc
      (λ (lang-id)
-       (define build-really-matched (build-really-matched/lang-arg lang-id))
-       (let ([cp (compile-pattern lang-id side-conditions-rewritten #t)])
-         (λ (main-exp exp f other-matches)
-           (let ([mtchs (match-pattern cp exp)])
-             (if mtchs
-                 (let loop ([mtchs mtchs]
-                            [acc other-matches])
-                   (cond
-                     [(null? mtchs) acc]
-                     [else 
-                      (let* ([mtch (car mtchs)]
-                             [bindings (mtch-bindings mtch)]
-                             [really-matched (build-really-matched main-exp bindings)])
-                        (cond
+        (define build-really-matched (build-really-matched/lang-arg lang-id))
+        (let ([cp (compile-pattern lang-id side-conditions-rewritten #t)])
+          (λ (main-exp exp f other-matches)
+             (let ([mtchs (match-pattern cp exp)])
+               (if mtchs
+                   (let loop ([mtchs mtchs]
+                              [acc other-matches])
+                     (cond
+                      [(null? mtchs) acc]
+                      [else 
+                       (let* ([mtch (car mtchs)]
+                              [bindings (mtch-bindings mtch)]
+                              [really-matched (build-really-matched main-exp bindings)])
+                         (cond
                           [really-matched
                            (for-each
                             (λ (c)
-                              (let ([r (coverage-relation c)])
-                                (when (and (reduction-relation? r)
-                                           (memf (λ (r) (eq? case-id (rewrite-proc-id r)))
-                                                 (reduction-relation-make-procs r)))
-                                  (cover-case case-id c))))
+                               (let ([r (coverage-relation c)])
+                                 (when (and (reduction-relation? r)
+                                            (memf (λ (r) (eq? case-id (rewrite-proc-id r)))
+                                                  (reduction-relation-make-procs r)))
+                                       (cover-case case-id c))))
                             (relation-coverage))
                            (loop (cdr mtchs) 
                                  (map/mt (λ (x) (list name
@@ -966,7 +966,7 @@
                                          really-matched acc))]
                           [else 
                            (loop (cdr mtchs) acc)]))]))
-                 other-matches)))))
+                   other-matches)))))
      name
      lhs-w/extras-proc
      lhs-source
@@ -1257,14 +1257,13 @@
                                    (list the-clause-name #'id)))
              (set! the-clause-name #'id)
              stuffs)]
-          [_ 
-           (cons stuff+name stuffs)])))
+          [_ (cons stuff+name stuffs)])))
     (cons (cond
             [(not the-clause-name) #f]
             [(identifier? the-clause-name) (symbol->string (syntax-e the-clause-name))]
             [else the-clause-name])
           (reverse stuff-without-clause-name))))
-
+ 
 (define-for-syntax (eliminate-metafunction-ors stx)
   (define (is-not-or? x)
     (syntax-case x (or)
@@ -2190,7 +2202,7 @@
                       (identifier? #'x)
                       #'define-language-name]))
                  '(all-names ...)
-                 (to-table #'name #'())))))))]))
+                 (to-table #'())))))))]))
 
 (define (union-language old-langs/prefixes)
   
